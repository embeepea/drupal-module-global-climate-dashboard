<?php
  /*
   * The global_climate_dashboard module tests out setting up a block using the block API and
   * rendering some content in the block using a renderable array.
   */

/**
 * Implements hook_init
 */
  /* I think we can add css and js files when the block is viewed, rather than here
function global_climate_dashboard_init() {
  drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/global_climate_dashboard.css");
  drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/swfobject.js");
}
  */

  /*
   * Implements hook_block_info().
   */
function global_climate_dashboard_block_info() {
  /*
   * $blocks[] Defines the blocks controlled by this module.
   */
  $blocks['global_climate_dashboard'] =
    array(
          'info' => t('Global Climate Dashboard'),
          );
  $blocks['global_climate_dashboard_preview'] =
    array(
          'info' => t('Global Climate Dashboard Preview'),
          );
  return $blocks;
}

/*
 * Implements hook_block_configure().
 */
function global_climate_dashboard_block_configure($delta) {
  $form = array();
  switch ($delta) {
  case 'global_climate_dashboard':
    /* Variables needed
       $width
       $height
       $swf_path
       $config_path
       Set variables: variable_set($name, $value)
       Get variables: variable_get($name, $default = NULL)
       Set default (in block config form): '#default_value' => variable_get($name, $default = NULL),
    */
    $form['width'] = array(
			   '#type' => 'textfield',
			   '#title' => 'Dashboard Width',
			   '#description' => 'The pixel width for the dashboard',
			   '#default_value' => variable_get('global_climate_dashboard_width'),
			   );

    $form['height'] = array(
			    '#type' => 'textfield',
			    '#title' => 'Dashboard Height',
			    '#description' => 'The pixel height for the dashboard',
			    '#default_value' => variable_get('global_climate_dashboard_height'),
			    );

    $form['config_path'] = array(
				 '#type' => 'textfield',
				 '#title' => 'Dashboard Config Path',
				 '#description' => 'The URL of the dashboard xml configuration file to load',
				 '#default_value' => variable_get('global_climate_dashboard_config_path'),
				 );

    $form['assets_path'] = array(
				 '#type' => 'textfield',
				 '#title' => 'Dashboard Assets Path',
				 '#description' => 'The URL of the dashboard `assets` directory',
				 '#default_value' => variable_get('global_climate_dashboard_assets_path'),
				 );

    $form['swf_path'] = array(
			      '#type' => 'textfield',
			      '#title' => 'Flash fallback version SWF Path',
			      '#description' => 'The path to the dashboard flash swf file; if this it not an absolute url, it is interpreted relative to the Drupal installation directory',
			      '#default_value' => variable_get('global_climate_dashboard_swf_path'),
			      );

    $form['swf_config_path'] = array(
			      '#type' => 'textfield',
			      '#title' => 'Dashboard config path for flash fallback verison',
			      '#description' => 'The URL of the dashboard xml configuration file to load for the flash fallback version',
			      '#default_value' => variable_get('global_climate_dashboard_swf_config_path'),
			      );

    break;
  }
  return $form;
}	

/*
 * Implements hook_block_save().
 */
function global_climate_dashboard_block_save($delta ='', $edit = array()) {
  switch ($delta) {
  case 'global_climate_dashboard':
    // Setting the dashboard variables from form values
    variable_set('global_climate_dashboard_width', $edit['width']);
    variable_set('global_climate_dashboard_height', $edit['height']);
    variable_set('global_climate_dashboard_config_path', $edit['config_path']);
    variable_set('global_climate_dashboard_assets_path', $edit['assets_path']);
    variable_set('global_climate_dashboard_swf_path', $edit['swf_path']);
    variable_set('global_climate_dashboard_swf_config_path', $edit['swf_config_path']);
    break;
  }	
}

/*
 * Implements hook_block_view().
 */
function global_climate_dashboard_block_view($delta = '') {
  switch($delta) {
  case 'global_climate_dashboard':
  case 'global_climate_dashboard_preview':
    $block['content'] = global_climate_dashboard_contents($delta);	
    return $block;
    break;
  }
}


/*
 * Custom function to render the 'mugl' field.
 */
function global_climate_dashboard_contents($delta) {
  $preview = false;
  switch($delta) {
  case 'global_climate_dashboard_preview':
    $preview = true;
  case 'global_climate_dashboard':
    drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/global_climate_dashboard.css");
    drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/dashboard.css");
    drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/dashboard-min.js");

    $width           = variable_get('global_climate_dashboard_width');
    $height          = variable_get('global_climate_dashboard_height');
    $config_path     = variable_get('global_climate_dashboard_config_path') . ($preview ? "/draft" : "");
    $assets_path     = variable_get('global_climate_dashboard_assets_path');
    $swf_path        = variable_get('global_climate_dashboard_swf_path');
    $swf_config_path = variable_get('global_climate_dashboard_swf_config_path')  . ($preview ? "/draft" : "");

    if (strpos($swf_path, '://') === false) {
      // if the swf_path is not an absolute url, prepend the drupal base path to it:
      $swf_path = base_path() . $swf_path;
    }

    return array('#markup' => <<<EOF
<div id="global-climate-dashboard"></div>
<script type="text/javascript">
  dashboard.$(document).ready(function() {
    dashboard.$('#global-climate-dashboard').dashboard({
      config : '$config_path',
      assets : '$assets_path',
      flash  : {
         force             : false,
         swf_path          : '$swf_path',
         config            : '$swf_config_path'
      }
    });
  });
</script>
EOF
		 );

    break;
  }
}

function global_climate_dashboard_filter_info() {
  return array(
    'gcd_multigraph' => array(
      'title'       	 => 'Replace <multigraph> tag markup with interactive Multigraphs.',
      'description' 	 => '',
      'prepare callback' => 'global_climate_dashboard_multigraph_filter_prepare', 
      'process callback' => 'global_climate_dashboard_multigraph_filter_process',
      'cache' 		 => FALSE,
      'tips'  		 => 'global_climate_dashboard_multigraph_filter_tips',
      'weight' 		 => -100, // A default weight for the filter in new text formats
      //
      // 'settings callback' => The name of a function that returns configuration form elements
      //                        for the filter. See hook_filter_FILTER_settings() for details.
      // 'default settings' =>  An associative array containing default settings for the filter,
      //                        to be applied when the filter has not been configured yet.
    )
  );     
}

function global_climate_dashboard_multigraph_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Escape <multigraph ... />
  // $text = preg_replace('|<multigraph\s(.*)/>|', "[multigraph]$1[/multigraph]", $text);
  return $text;
}

function global_climate_dashboard_multigraph_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/multigraph-min.js");
  $text = preg_replace_callback('|\[\s*multigraph(.+?)\s*\]|', '_multigraph_edit_tag', $text);
  return $text;
}

function global_climate_dashboard_multigraph_filter_tips($filter, $format, $long) {
  if ($long) {
    return t('[multigraph ... ] markup turns into interactive Multigraph.');
  } else {
    return t('[multigraph ... ] markup turns into interactive Multigraph.');
  }
}

function _multigraph_edit_tag( $matches )
{
  global $base_url, $base_path;

  $width  = 500;
  $height = 300;
  $mugl   = FALSE;
  $js     = FALSE;
  
  $assignments = preg_split('/\s+/', trim($matches[1]));
  $args = array();
  for ($i=0; $i<count($assignments); ++$i) {
    list($var,$val) = preg_split('/=/', $assignments[$i]);
    // we run $val through html_entity_decode() because for some reason any quotes within it have been
    // converted to HTML entities at this point
    $val = html_entity_decode($val);
    // remove delimiting double-quotes, if any
    $val = preg_replace('/^"(.*)"$/', "$1", $val );
    // remove delimiting single-quotes, if any
    $val = preg_replace('/^\'(.*)\'$/', "$1", $val );
    // run the final result through check_plain() to sanitize it
    $args[$var] = check_plain( $val );
  }
  if (array_key_exists('width',       $args))  { $width        = $args['width'];       }
  if (array_key_exists('height',      $args))  { $height       = $args['height'];      }
  if (array_key_exists('mugl',        $args))  { $mugl         = $args['mugl'];        }
  $flash_mugl = '';
  if (array_key_exists('flash_mugl',  $args))  { $flash_mugl   = $args['flash_mugl'];  }

  $id = sprintf("multigraph-%010d", mt_rand());

  $js = <<<EOF
(function(jQuery){
  jQuery(document).ready(function() {
    jQuery('#$id').multigraph({
        width      : $width,
        height     : $height,
        mugl       : '$mugl',
        flash_mugl : '$flash_mugl',
        error      : function(e) { 
            console.log(e);
            throw e;
        }
      });
  });
}(window.multigraph.jQuery));
EOF
  ;

  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  return "<div id=\"$id\"></div>";

}


/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function global_climate_dashboard_node_info() {
  // We define the node type as an associative array.
  return array(
    'gcd_mugl' => array(
      'name' => t('Dashboard/Multigraph MUGL'),
      'base' => 'global_climate_dashboard',
      'description' => t('Stores MUGL documents for use with the Global Climate Dashboard and/or Multigraph.'),
      'title_label' => t('MUGL Title'),
      'locked' => TRUE,
    ),
    'gcd_data' => array(
      'name' => t('Dashboard/Multigraph Data'),
      'base' => 'global_climate_dashboard',
      'description' => t('Stores CSV data for use with the Global Climate Dashboard and/or Multigraph.'),
      'title_label' => t('Data Title'),
      'locked' => TRUE,
    ),
  );
}

function global_climate_dashboard_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function global_climate_dashboard_node_type_insert($content_type) {
  if ($content_type->type == 'gcd_mugl') {
    _gcd_add_fields('gcd_mugl', _gcd_mugl_fields());
  } else if ($content_type->type == 'gcd_data') {
    _gcd_add_fields('gcd_data', _gcd_data_fields());
  }
}

function _gcd_add_fields($content_type, $fields) {
    foreach ($fields as $field) {
      field_create_field($field['field_info']);
      $instance = $field['instance_info'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = $content_type;
      field_create_instance($instance);
    }
}

function _gcd_mugl_fields() {
  return array(


    array(
      'field_info' => array(
        'field_name'  => 'gcd_mugl_id',
        'cardinality' => 1,
        'type'        => 'text',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_mugl_id',
        'label' => t('MUGL Id'),
        'description' => 'Enter a short id to be used to identify this MUGL; must be unique among all Dashboard/Multigraph MUGL nodes on this site.',
        'type'        => 'text',
        'widget'      => array(
          'type'    => 'text_textfield',
        ),
      )
    ),


    array(
      'field_info' => array(
        'field_name'  => 'gcd_mugl_xmltext',
        'cardinality' => 1,
        'type'        => 'text_long',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_mugl_xmltext',
        'label' => t('MUGL'),
        'description' => 'Enter the MUGL here; this should be a valid XML document.',
        'type'        => 'text_long',
        'widget' => array(
          'type' => 'text_textarea',
          'module' => 'text',
          'settings' => array(
            'rows' => '20'
          )
        ),
      )
    ),


    
  );
}


function _gcd_data_fields() {
  return array(


    array(
      'field_info' => array(
        'field_name'  => 'gcd_data_id',
        'cardinality' => 1,
        'type'        => 'text',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_data_id',
        'label' => t('Data Id'),
        'description' => 'Enter a short id to be used to identify this data; must be unique among all Dashboard/Multigraph Data nodes on this site.',
        'type'        => 'text',
        'widget'      => array(
          'type'    => 'text_textfield',
        ),
      )
    ),


    array(
      'field_info' => array(
        'field_name'  => 'gcd_data_csvtext',
        'cardinality' => 1,
        'type'        => 'text_long',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_data_csvtext',
        'label' => t('Data'),
        'description' => 'Type or paste the data here.  It should be in CSV format, one set of values per row, with values on the same row separated by commas.',
        'type'        => 'text_long',
        'widget' => array(
          'type' => 'text_textarea',
          'module' => 'text',
          'settings' => array(
            'rows' => '20'
          )
        ),
      )
    ),


    
  );
}

function global_climate_dashboard_view($node, $view_mode) {
  if ($node->type == "gcd_mugl" || $node->type == "gcd_data") {
    drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/global_climate_dashboard_admin.css");
  }
  return $node;
}

function global_climate_dashboard_node_presave($node) {
  if ($node->type == "gcd_mugl") {
    $node->gcd_mugl_xmltext["und"][0]["value"] = _gcd_pretty_xml($node->gcd_mugl_xmltext["und"][0]["value"]);
  }
  if ($node->type == "gcd_data") {
    $node->gcd_data_csvtext["und"][0]["value"] = _gcd_pretty_csv($node->gcd_data_csvtext["und"][0]["value"]);
  }
}

function global_climate_dashboard_validate($node, $form, &$form_state) {

  //
  // Validate gcd_data content type
  //
  if ($node->type == "gcd_data") {
    //dsm($node);
    // make sure the gcd_data_id is unique among all nodes of type gcd_data
    $rows = db_select('field_data_gcd_data_id', 't')
      ->fields('t', array('entity_id'))
      ->condition('gcd_data_id_value', $node->gcd_data_id['und'][0]['value'])
      ->condition('entity_id', $node->nid, $operator="!=")
      ->execute()
      ->fetchAll();
    if (!empty($rows)) {
      form_set_error('gcd_data_id',
                     t('Data Id must be unique (there is another Data item with id "'.$node->gcd_data_id['und'][0]['value'].'").  Please choose a different id.'));
    }
    //
    // make sure the gcd_data_csvtext value is valid
    //
    $err = _gcd_validate_csv($node->gcd_data_csvtext['und'][0]['value']);
    if ($err != "") {
      form_set_error('gcd_data_csvtext', t($err));
    }
  }

  //
  // Validate gcd_mugl content type
  //
  if ($node->type == "gcd_mugl") {
    //
    // make sure the gcd_mugl_id is unique among all nodes of type gcd_mugl
    //
    $rows = db_select('field_data_gcd_mugl_id', 't')
      ->fields('t', array('entity_id'))
      ->condition('gcd_mugl_id_value', $node->gcd_mugl_id['und'][0]['value'])
      ->condition('entity_id', $node->nid, $operator="!=")
      ->execute()
      ->fetchAll();
    if (!empty($rows)) {
      form_set_error('gcd_mugl_id',
                     t('MUGL Id must be unique (there is another Mugl item with id "'.$node->gcd_mugl_id['und'][0]['value'].'").  Please choose a different id.'));
    }
    //
    // make sure the gcd_mugl_xmltext value is well-formed XML
    //
    $err = _gcd_validate_xml($node->gcd_mugl_xmltext['und'][0]['value']);
    if ($err != "") {
      form_set_error('gcd_mugl_xmltext', t($err));
    }
  }

}

function _gcd_handlexmlerror($errno, $errstr, $errfile, $errline) {
  if ($errno==E_WARNING && (substr_count($errstr,"DOMDocument::loadXML()")>0)) {
      throw new DOMException($errstr);
  } else {
      return false;
  }
}

function _gcd_pretty_csv($csv) {
  $lines = preg_split("/\s*\n\s*/", trim($csv));
  $nonblank_lines = array();
  foreach ($lines as $line) {
    $line = trim($line);
    if ($line != "") {
      $nonblank_lines[] = join(",", preg_split("/\s*,\s*/", $line));
    }
  }
  return join("\n", $nonblank_lines);
}

function _gcd_validate_csv($csv) {
  $csv = _gcd_pretty_csv($csv);
  $lines = preg_split("/\s*\n\s*/", $csv);
  if (count($lines) == 0) {
    return "The CSV text cannot be empty.";
  }
  $nfields = count(preg_split("/,/", $lines[0]));
  for ($i=1; $i<count($lines); ++$i) {
    $nf = count(preg_split("/,/", $lines[$i]));
    if ($nf != $nfields) {
      return sprintf("Inconsistent number of values: there are %1d values on line 1, but %1d values on line %1d.", $nfields, $nf, $i+1);
    }
  }
  return "";
}

function _gcd_pretty_xml($xml) {
  $doc = new DOMDocument();
  $doc->preserveWhiteSpace = false;
  $doc->loadXML($xml);
  $doc->formatOutput = true;
  return _gcd_to_xml($doc->documentElement);
}

function _gcd_validate_xml($xml) {
  set_error_handler('_gcd_handlexmlerror');
  $err = "";
  try {
    $doc = new DOMDocument();
    $doc->loadXML($xml);
  } catch (DOMException $e) {
    $err = (
      "The MUGL XML is not well-formed:\n" .
      preg_replace('/in Entity, .*$/', '', 
                   preg_replace('/^DOMDocument::loadXML\(\):\s+/', '',
                                $e->getMessage()))
    );
  }
  restore_error_handler();
  return $err;
}

function global_climate_dashboard_node_access($node, $op, $account) {
  if (($op == 'view') && $node && (gettype($node)=="object")) {

    // Don't all anonymous users to view nodes of type 'gcd_mugl' or 'gcd_data'; they can still
    // use the mugl service at the 'mugl' URL to fetch MUGLs, so the dashboard and multigraphs
    // will work for them, but we want to hide the gcd_mugl and gcd_data nodes from direct view.

    if ($node->type == "gcd_mugl") {
      if (!user_is_logged_in()) {
        return NODE_ACCESS_DENY;
      }
      return NODE_ACCESS_IGNORE;
    }

    if ($node->type == "gcd_data") {
      if (!user_is_logged_in()) {
        return NODE_ACCESS_DENY;
      }
      return NODE_ACCESS_IGNORE;
    }


  }
}

/**
 * Implements hook_menu().
 */
function global_climate_dashboard_menu() {

  $items['gcd/mugl'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback Only',
    'page callback' => '_gcd_mugl_controller',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
  );
  $items['gcd/dashboard'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback Only',
    'page callback' => '_gcd_dashboard_controller',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
  );

  return $items;
}

function _gcd_dashboard_controller($id,$draft) {
  $latest_draft = ($draft == "draft");

  if ($latest_draft && !user_is_logged_in()) {
    // don't allow anonyous users to request drafts
    drupal_access_denied();
    drupal_exit();
  }

  $doc = _gcd_get_mugl_dom_expanded($id,$latest_draft);
  $doc->formatOutput = true;

  if ($doc == null) {
      header("Content-type: application/xml");
      print('<error>mugl not found</error>');
      drupal_exit();
  }

  print $doc->saveXML() . "\n";
  drupal_exit();
}

function _gcd_mugl_controller($id,$draft) {
  $latest_draft = ($draft == "draft");

  if ($latest_draft && !user_is_logged_in()) {
    // don't allow anonyous users to request drafts
    drupal_access_denied();
    drupal_exit();
  }

  $doc = _gcd_get_mugl_dom_expanded($id,$latest_draft);
  $doc->formatOutput = true;

  if ($doc == null) {
    header("Content-type: application/xml");
    print('<error>mugl not found</error>');
    drupal_exit();
  }

  $domNodeList = $doc->getElementsByTagName("mugl");
  if ($domNodeList->length < 1) {
    // should really throw a 404, or 500, here
    header("Content-type: application/xml");
    print("<error>mugl not found</error>\n");
    drupal_exit();
  }
  $muglNode = $domNodeList->item(0);
  header("Content-type: application/xml");
  print _gcd_to_xml($muglNode) . "\n";
  drupal_exit();
}

  /*
   * Quick summary of the PHP DOM api as used in this file:
   *
   * The DOM api represents an XML document through instances of various
   * classes.  The full API is documented at
   * 
   *     http://us1.php.net/manual/en/intro.dom.php,
   *  
   * but the gist of it is that an XML document consists of a tree of
   * the following:
   *  
   *     DOMNode objects: the base class for all nodes in the tree
   *  
   *     DOMElement: subclass of DOMNode for storing XML element (tag)
   *         nodes
   *  
   *     DOMDocument object: subclass of DOMNode corresponding to the
   *         entire document.  Note that the DOMDocuemnt object is not
   *         the actual root node of the element tree; that is available
   *         in the $doc->documentElement property, which is a reference
   *         to a DOMElement object.
   *  
   * (There are other DOMNode subclasses for other things, such as
   * DOMCharacterData for text, and DOMComment for XML comments.)
   *  
   * DOMNodes contain a reference to the DOMDocument they belong to.
   * If you want to insert nodes from one document into another, as
   * happens below in the code that "expands" tabRef, graphRef, and
   * dataValuesRef nodes, you have to use the $doc->importNode
   * method to create copies of the nodes that have the correct
   * DOMDocument reference.  (Otherwise you get a cryptic "Wrong Document"
   * error.)
   */

  /*
   * _gcd_to_xml() takes an abitrary DOMElement and converts
   * it to an XML string.  (Note that the saveXML() method only exists on
   * the DOMDocuemnt class, not DOMNode or DOMElement; to convert a subtree
   * of an entire document, pass the DOMElement at its root to this function.
   */
function _gcd_to_xml($domElement) {
  return $domElement->ownerDocument->saveXML($domElement);
}

function dnl2array($domNodeList) {
  $answer = array();
  for ($i=0; $i<$domNodeList->length; ++$i) {
    $answer[] = $domNodeList->item($i);
  }
  return $answer;
}

/*
 * Take a MUGL Id string $id, and return a string containing the gcd_mugl_xmltext field
 * value of the gcd_mugl node whose gcd_mugl_id field equals $id.  Returns null if there
 * is no gcd_mugl node with the given $id.
 *
 * If the optional 2nd argument is `true`, then return the mugl for the node's latest draft.
 * Without that arguemtn, or if `false` is passed as the 2nd arg, returns the value corresponding
 * to the pulished version.
 */
function _gcd_get_mugl($id,$latest_draft=false) {
  if ($latest_draft) {
    // fetch latest draft from `revision` tables
    $xmltext_table = 'field_revision_gcd_mugl_xmltext';
    $id_table = 'field_revision_gcd_mugl_id';
  } else {
    // fetch published copy from `data` tables
    $xmltext_table = 'field_data_gcd_mugl_xmltext';
    $id_table = 'field_data_gcd_mugl_id';
  }
  $query = db_select($xmltext_table,  'v');
  $query->join($id_table, 'i', 'i.entity_id=v.entity_id');
  $query->fields('v', array('gcd_mugl_xmltext_value'));
  $query->condition('i.gcd_mugl_id_value', $id);
  // if fetching latest draft, fetch only 1st result in decreasing revision id order
  if ($latest_draft) {
    $query->orderBy('v.revision_id', 'DESC');
    $query->range(0,1);
  }
  return $query->execute()->fetchField();
}

function _gcd_get_data($id,$latest_draft=false) {
  if ($latest_draft) {
    // fetch latest draft from `revision` tables
    $csvtext_table = 'field_revision_gcd_data_csvtext';
    $id_table = 'field_revision_gcd_data_id';
  } else {
    // fetch published copy from `data` tables
    $csvtext_table = 'field_data_gcd_data_csvtext';
    $id_table = 'field_data_gcd_data_id';
  }
  $query = db_select($csvtext_table,  'd');
  $query->join($id_table, 'i', 'i.entity_id=d.entity_id');
  $query->fields('d', array('gcd_data_csvtext_value'));
  $query->condition('i.gcd_data_id_value', $id);
  if ($latest_draft) {
    $query->orderBy('d.revision_id', 'DESC');
    $query->range(0,1);
  }
  $data = $query->execute()->fetchField();
  // Remove control-M characters at EOL; somehow they creep in, either
  // because Drupal or MySQL is inserting them, perhaps due to some
  // settings on the gcd_data_csvtext field or table column that I didn't know
  // to unset.  In any case, the following str_replace gets rid of them.
  return str_ireplace("\x0D", "", $data);
}

function _gcd_get_mugl_dom($id,$latest_draft=false) {
  $mugl = _gcd_get_mugl($id,$latest_draft);
  if ($mugl == null) { return null; }
  $doc = new DOMDocument();
  $doc->preserveWhiteSpace = false;
  $doc->loadXML($mugl);
  return $doc;
}

function _gcd_get_mugl_dom_expanded($id,$latest_draft=false) {
  $doc = _gcd_get_mugl_dom($id,$latest_draft);

  if ($doc != null) {
    $doc->documentElement->setAttribute("id", $id); // add the 'id' attribute

    $refElements = array();
    foreach (dnl2array($doc->getElementsByTagName("tabRef")) as $e) {
      $refElements[] = array(
        'type' => 'tab',
        'element' => $e
      );
    }
    foreach (dnl2array($doc->getElementsByTagName("graphRef")) as $e) {
      $refElements[] = array(
        'type' => 'graph',
        'element' => $e
      );
    }
    foreach (dnl2array($doc->getElementsByTagName("dataValuesRef")) as $e) {
      $refElements[] = array(
        'type' => 'dataValues',
        'element' => $e
      );
    }

    for ($i=0; $i<count($refElements); ++$i) {
      $e = $refElements[$i]['element'];
      $type = $refElements[$i]['type'];
      $id = $e->getAttribute("id");
      if ($type == "dataValues") {
        $data = _gcd_get_data($id,$latest_draft);
        $childRoot = $doc->createElement("values");
        $childRoot->appendChild($doc->createTextNode("\n".$data));
        $childRoot->setAttribute("id", $id);
      } else {
        $childDoc = _gcd_get_mugl_dom_expanded($id,$latest_draft);
        $childRoot = $childDoc->documentElement;
      }
      $parentElement = $e->parentNode;
      $parentElement->replaceChild($doc->importNode($childRoot, true), $e);
    }
  }

  return $doc;
}
