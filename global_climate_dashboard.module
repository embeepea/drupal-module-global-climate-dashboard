<?php
  /*
   * The global_climate_dashboard module tests out setting up a block using the block API and
   * rendering some content in the block using a renderable array.
   */

/**
 * Implements hook_init
 */
  /* I think we can add css and js files when the block is viewed, rather than here
function global_climate_dashboard_init() {
  drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/global_climate_dashboard.css");
  drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/swfobject.js");
}
  */

  /*
   * Implements hook_block_info().
   */
function global_climate_dashboard_block_info() {
  /*
   * $blocks[] Defines the blocks controlled by this module.
   */
  $blocks['global_climate_dashboard'] =
    array(
          'info' => t('Global Climate Dashboard'),
          );
  return $blocks;
}

/*
 * Implements hook_block_configure().
 */
function global_climate_dashboard_block_configure($delta) {
  $form = array();
  switch ($delta) {
  case 'global_climate_dashboard':
    /* Variables needed
       $width
       $height
       $swf_path
       $config_path
       Set variables: variable_set($name, $value)
       Get variables: variable_get($name, $default = NULL)
       Set default (in block config form): '#default_value' => variable_get($name, $default = NULL),
    */
    $form['width'] = array(
			   '#type' => 'textfield',
			   '#title' => 'Dashboard Width',
			   '#description' => 'The pixel width for the dashboard',
			   '#default_value' => variable_get('global_climate_dashboard_width'),
			   );

    $form['height'] = array(
			    '#type' => 'textfield',
			    '#title' => 'Dashboard Height',
			    '#description' => 'The pixel height for the dashboard',
			    '#default_value' => variable_get('global_climate_dashboard_height'),
			    );

    $form['config_path'] = array(
				 '#type' => 'textfield',
				 '#title' => 'Dashboard Config Path',
				 '#description' => 'The URL of the dashboard xml configuration file to load',
				 '#default_value' => variable_get('global_climate_dashboard_config_path'),
				 );

    $form['assets_path'] = array(
				 '#type' => 'textfield',
				 '#title' => 'Dashboard Assets Path',
				 '#description' => 'The URL of the dashboard `assets` directory',
				 '#default_value' => variable_get('global_climate_dashboard_assets_path'),
				 );

    $form['swf_path'] = array(
			      '#type' => 'textfield',
			      '#title' => 'Flash fallback version SWF Path',
			      '#description' => 'The path to the dashboard flash swf file; if this it not an absolute url, it is interpreted relative to the Drupal installation directory',
			      '#default_value' => variable_get('global_climate_dashboard_swf_path'),
			      );

    $form['swf_config_path'] = array(
			      '#type' => 'textfield',
			      '#title' => 'Dashboard config path for flash fallback verison',
			      '#description' => 'The URL of the dashboard xml configuration file to load for the flash fallback version',
			      '#default_value' => variable_get('global_climate_dashboard_swf_config_path'),
			      );

    break;
  }
  return $form;
}	

/*
 * Implements hook_block_save().
 */
function global_climate_dashboard_block_save($delta ='', $edit = array()) {
  switch ($delta) {
  case 'global_climate_dashboard':
    // Setting the dashboard variables from form values
    variable_set('global_climate_dashboard_width', $edit['width']);
    variable_set('global_climate_dashboard_height', $edit['height']);
    variable_set('global_climate_dashboard_config_path', $edit['config_path']);
    variable_set('global_climate_dashboard_assets_path', $edit['assets_path']);
    variable_set('global_climate_dashboard_swf_path', $edit['swf_path']);
    variable_set('global_climate_dashboard_swf_config_path', $edit['swf_config_path']);
    break;
  }	
}

/*
 * Implements hook_block_view().
 */
function global_climate_dashboard_block_view($delta = '') {
  switch($delta) {
  case 'global_climate_dashboard':
    $block['content'] = global_climate_dashboard_contents($delta);	
    return $block;
    break;
  }
}


/*
 * Custom function to render the 'mugl' field.
 */
function global_climate_dashboard_contents($delta) {
  switch($delta) {
  case 'global_climate_dashboard':
    drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/global_climate_dashboard.css");
    drupal_add_css(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/dashboard.css");
    drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/dashboard-min.js");

    $width           = variable_get('global_climate_dashboard_width');
    $height          = variable_get('global_climate_dashboard_height');
    $config_path     = variable_get('global_climate_dashboard_config_path');
    $assets_path     = variable_get('global_climate_dashboard_assets_path');
    $swf_path        = variable_get('global_climate_dashboard_swf_path');
    $swf_config_path = variable_get('global_climate_dashboard_swf_config_path');

    if (strpos($swf_path, '://') === false) {
      // if the swf_path is not an absolute url, prepend the drupal base path to it:
      $swf_path = base_path() . $swf_path;
    }

    return array('#markup' => <<<EOF
<div id="global-climate-dashboard"></div>
<script type="text/javascript">
  dashboard.$(document).ready(function() {
    dashboard.$('#global-climate-dashboard').dashboard({
      config : '$config_path',
      assets : '$assets_path',
      flash  : {
         force             : false,
         swf_path          : '$swf_path',
         config            : '$swf_config_path'
      }
    });
  });
</script>
EOF
		 );

    break;
  }
}

function global_climate_dashboard_filter_info() {
  return array(
    'gcd_multigraph' => array(
      'title'       	 => 'Replace <multigraph> tag markup with interactive Multigraphs.',
      'description' 	 => '',
      'prepare callback' => 'global_climate_dashboard_multigraph_filter_prepare', 
      'process callback' => 'global_climate_dashboard_multigraph_filter_process',
      'cache' 		 => FALSE,
      'tips'  		 => 'global_climate_dashboard_multigraph_filter_tips',
      'weight' 		 => -100, // A default weight for the filter in new text formats
      //
      // 'settings callback' => The name of a function that returns configuration form elements
      //                        for the filter. See hook_filter_FILTER_settings() for details.
      // 'default settings' =>  An associative array containing default settings for the filter,
      //                        to be applied when the filter has not been configured yet.
    )
  );     
}

function global_climate_dashboard_multigraph_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Escape <multigraph ... />
  // $text = preg_replace('|<multigraph\s(.*)/>|', "[multigraph]$1[/multigraph]", $text);
  return $text;
}

function global_climate_dashboard_multigraph_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  drupal_add_js(drupal_get_path('module', 'global_climate_dashboard') . "/html5-app/multigraph-min.js");
  $text = preg_replace_callback('|\[\s*multigraph(.+?)\s*\]|', '_multigraph_edit_tag', $text);
  return $text;
}

function global_climate_dashboard_multigraph_filter_tips($filter, $format, $long) {
  if ($long) {
    return t('[multigraph ... ] markup turns into interactive Multigraph.');
  } else {
    return t('[multigraph ... ] markup turns into interactive Multigraph.');
  }
}

function _multigraph_edit_tag( $matches )
{
  global $base_url, $base_path;

  $width  = 500;
  $height = 300;
  $mugl   = FALSE;
  $js     = FALSE;
  
  $assignments = preg_split('/\s+/', trim($matches[1]));
  $args = array();
  for ($i=0; $i<count($assignments); ++$i) {
    list($var,$val) = preg_split('/=/', $assignments[$i]);
    // we run $val through html_entity_decode() because for some reason any quotes within it have been
    // converted to HTML entities at this point
    $val = html_entity_decode($val);
    // remove delimiting double-quotes, if any
    $val = preg_replace('/^"(.*)"$/', "$1", $val );
    // remove delimiting single-quotes, if any
    $val = preg_replace('/^\'(.*)\'$/', "$1", $val );
    // run the final result through check_plain() to sanitize it
    $args[$var] = check_plain( $val );
  }
  if (array_key_exists('width',       $args))  { $width        = $args['width'];       }
  if (array_key_exists('height',      $args))  { $height       = $args['height'];      }
  if (array_key_exists('mugl',        $args))  { $mugl         = $args['mugl'];        }
  $flash_mugl = '';
  if (array_key_exists('flash_mugl',  $args))  { $flash_mugl   = $args['flash_mugl'];  }

  $id = sprintf("multigraph-%010d", mt_rand());

  $js = <<<EOF
(function(jQuery){
  jQuery(document).ready(function() {
    jQuery('#$id').multigraph({
        width      : $width,
        height     : $height,
        mugl       : '$mugl',
        flash_mugl : '$flash_mugl',
        error      : function(e) { 
            console.log(e);
            throw e;
        }
      });
  });
}(window.multigraph.jQuery));
EOF
  ;

  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  return "<div id=\"$id\"/>";

}


/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function global_climate_dashboard_node_info() {
  // We define the node type as an associative array.
  return array(
    'gcd_mugl' => array(
      'name' => t('Dashboard/Multigraph MUGL'),
      'base' => 'global_climate_dashboard',
      'description' => t('Stores MUGL documents for use with the Global Climate Dashboard and/or Multigraph.'),
      'title_label' => t('MUGL Title'),
      'locked' => TRUE,
    ),
    'gcd_data' => array(
      'name' => t('Dashboard/Multigraph Data'),
      'base' => 'global_climate_dashboard',
      'description' => t('Stores CSV data for use with the Global Climate Dashboard and/or Multigraph.'),
      'title_label' => t('Data Title'),
      'locked' => TRUE,
    ),
  );
}

function global_climate_dashboard_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function global_climate_dashboard_node_type_insert($content_type) {
  if ($content_type->type == 'gcd_mugl') {
    _gcd_add_fields('gcd_mugl', _gcd_mugl_fields());
  } else if ($content_type->type == 'gcd_data') {
    _gcd_add_fields('gcd_data', _gcd_data_fields());
  }
}

function _gcd_add_fields($content_type, $fields) {
    foreach ($fields as $field) {
      field_create_field($field['field_info']);
      $instance = $field['instance_info'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = $content_type;
      field_create_instance($instance);
    }
}

function _gcd_mugl_fields() {
  return array(


    array(
      'field_info' => array(
        'field_name'  => 'gcd_mugl_id',
        'cardinality' => 1,
        'type'        => 'text',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_mugl_id',
        'label' => t('MUGL Id'),
        'description' => 'Enter a short id to be used to identify this MUGL; must be unique among all Dashboard/Multigraph MUGL nodes on this site.',
        'type'        => 'text',
        'widget'      => array(
          'type'    => 'text_textfield',
        ),
      )
    ),


    array(
      'field_info' => array(
        'field_name'  => 'gcd_mugl',
        'cardinality' => 1,
        'type'        => 'text_long',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_mugl',
        'label' => t('MUGL'),
        'description' => 'Enter the MUGL here.',
        'type'        => 'text_long',
        'widget' => array(
          'type' => 'text_textarea',
          'module' => 'text',
          'settings' => array(
            'rows' => '20'
          )
        ),
      )
    ),


    
  );
}


function _gcd_data_fields() {
  return array(


    array(
      'field_info' => array(
        'field_name'  => 'gcd_data_id',
        'cardinality' => 1,
        'type'        => 'text',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_data_id',
        'label' => t('Data Id'),
        'description' => 'Enter a short id to be used to identify this data; must be unique among all Dashboard/Multigraph Data nodes on this site.',
        'type'        => 'text',
        'widget'      => array(
          'type'    => 'text_textfield',
        ),
      )
    ),


    array(
      'field_info' => array(
        'field_name'  => 'gcd_data',
        'cardinality' => 1,
        'type'        => 'text_long',
      ),
      'instance_info' => array(
        'field_name'  => 'gcd_data',
        'label' => t('Data'),
        'description' => 'Type or paste the data here.  It should be in CSV format, one set of values per row, with values on the same row separated by commas.',
        'type'        => 'text_long',
        'widget' => array(
          'type' => 'text_textarea',
          'module' => 'text',
          'settings' => array(
            'rows' => '20'
          )
        ),
      )
    ),


    
  );
}

function global_climate_dashboard_validate($node, $form, &$form_state) {

  //
  // Validate gcd_data content type
  //
  if ($node->type == "gcd_data") {
    //dsm($node);
    // make sure the gcd_data_id is unique among all nodes of type gcd_data
    $rows = db_select('field_data_gcd_data_id', 't')
      ->fields('t', array('entity_id'))
      ->condition('gcd_data_id_value', $node->gcd_data_id['und'][0]['value'])
      ->condition('entity_id', $node->nid, $operator="!=")
      ->execute()
      ->fetchAll();
    if (!empty($rows)) {
      form_set_error('gcd_data_id',
                     t('Data Id must be unique (there is another Data item with id "'.$node->gcd_data_id['und'][0]['value'].'").  Please choose a different id.'));
    }
  }

  //
  // Validate gcd_mugl content type
  //
  if ($node->type == "gcd_mugl") {
    //dsm($node);
    // make sure the gcd_mugl_id is unique among all nodes of type gcd_mugl
    $rows = db_select('field_data_gcd_mugl_id', 't')
      ->fields('t', array('entity_id'))
      ->condition('gcd_mugl_id_value', $node->gcd_mugl_id['und'][0]['value'])
      ->condition('entity_id', $node->nid, $operator="!=")
      ->execute()
      ->fetchAll();
    if (!empty($rows)) {
      form_set_error('gcd_mugl_id',
                     t('MUGL Id must be unique (there is another Mugl item with id "'.$node->gcd_mugl_id['und'][0]['value'].'").  Please choose a different id.'));
    }
  }

}

function global_climate_dashboard_node_access($node, $op, $account) {
  if (($op == 'view') && $node && (gettype($node)=="object")) {

    // Don't all anonymous users to view nodes of type 'gcd_mugl' or 'gcd_data'; they can still
    // use the mugl service at the 'mugl' URL to fetch MUGLs, so the dashboard and multigraphs
    // will work for them, but we want to hide the gcd_mugl and gcd_data nodes from direct view.

    if ($node->type == "gcd_mugl") {
      if (!user_is_logged_in()) {
        return NODE_ACCESS_DENY;
      }
      return NODE_ACCESS_IGNORE;
    }

    if ($node->type == "gcd_data") {
      if (!user_is_logged_in()) {
        return NODE_ACCESS_DENY;
      }
      return NODE_ACCESS_IGNORE;
    }


  }
}
